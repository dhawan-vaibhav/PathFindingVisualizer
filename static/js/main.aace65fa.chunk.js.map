{"version":3,"sources":["logo.svg","Djitskra.js","node.jsx","pathFindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["updateDistance","adjacentNode","currentNode","grid","distance","isVisited","isWall","row","col","parseInt","previousNode","minDistance","nodes","min","Infinity","minIndex","i","length","getAllNodes","push","Node","this","props","isStartNode","isFinishNode","onMouseDown","onMouseEnter","onMouseUp","onMouseLeave","className","id","Component","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","PathFindingVisualizer","context","visualizeDjitskra","bind","state","mouseIsDown","movingFinish","movingStart","modalShow","createGrid","setState","rowSourceNode","colSourceNode","u","djitskra","finishNode","console","log","shortestPathNodes","printPaths","rowIdx","colIdx","setTimeout","document","getElementById","onClick","map","node","nodeIdx","unshift","currentRow","j","MyVerticallyCenteredModal","Modal","size","aria-labelledby","centered","Header","closeButton","Title","Body","style","color","Footer","Button","onHide","App","React","useState","setModalShow","show","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.aace65fa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export function djitskra(grid, rowSourceNode, colSourceNode) {\r\n  grid[rowSourceNode][colSourceNode].distance = 0;\r\n  let nodes = getAllNodes(grid);\r\n\r\n   // console.log(grid.length);\r\n    //console.log(grid[0].length);\r\n\r\n  for (let i = 0; i < nodes.length; i++) {\r\n\r\n    nodes = getAllNodes(grid);\r\n\r\n    const u = minDistance(nodes);\r\n\r\n    if(u===Infinity) continue;\r\n\r\n   // console.log(\"Idx: \"+ u);\r\n\r\n    const currentNode = nodes[u];\r\n    grid[currentNode.row][currentNode.col].isVisited=true;\r\n\r\n\r\n    if (parseInt(currentNode.row+1)<= grid.length-1) {\r\n      /* console.log(\"currentRow1: \"+parseInt(currentNode.row+1) );\r\n      console.log(\"currentRow2: \"+ parseInt(currentNode.row) );\r\n      console.log(\"currentCol: \"+ currentNode.col); */\r\n      let adjacentNode = grid[parseInt(currentNode.row + 1)][currentNode.col];\r\n      updateDistance(adjacentNode, currentNode, grid);\r\n    }\r\n\r\n    if (parseInt(currentNode.col + 1) <= grid[0].length-1) {\r\n      let adjacentNode = grid[currentNode.row][parseInt(currentNode.col + 1)];\r\n      updateDistance(adjacentNode, currentNode, grid);\r\n    }\r\n\r\n    if (parseInt(currentNode.row - 1) >= 0) {\r\n      let adjacentNode = grid[parseInt(currentNode.row - 1)][currentNode.col];\r\n      updateDistance(adjacentNode, currentNode, grid);\r\n    }\r\n\r\n    if (parseInt(currentNode.col - 1) >= 0) {\r\n      let adjacentNode = grid[currentNode.row][parseInt(currentNode.col - 1)];\r\n      updateDistance(adjacentNode, currentNode, grid);\r\n    }\r\n  }\r\n\r\n  return nodes;\r\n}\r\n\r\nlet updateDistance = (adjacentNode, currentNode, grid) => {\r\n  if (\r\n    currentNode.distance + 1 < adjacentNode.distance &&\r\n    adjacentNode.isVisited === false && adjacentNode.isWall===false\r\n  ) {\r\n    grid[adjacentNode.row][adjacentNode.col].distance =\r\n      parseInt(currentNode.distance + 1);\r\n    grid[adjacentNode.row][adjacentNode.col].previousNode = currentNode;\r\n  }\r\n};\r\nlet minDistance = (nodes) => {\r\n  let min=Infinity;\r\n  let minIndex = Infinity;\r\n\r\n\r\n  for(let i=0; i<nodes.length; i++){\r\n    let nodeDistance = nodes[i].distance;\r\n    if (nodeDistance<= min && nodes[i].isVisited === false && nodes[i].isWall===false) {\r\n        min = nodes[i].distance;\r\n        minIndex = i;\r\n      }\r\n\r\n\r\n  }\r\n\r\n\r\n  return minIndex;\r\n};\r\n\r\nlet getAllNodes = (grid) => {\r\n  let nodes = [];\r\n\r\n  for (const row in grid) {\r\n    for (const col in grid[row]) {\r\n      nodes.push(grid[row][col]);\r\n    }\r\n  }\r\n  return nodes;\r\n};\r\n","import React, { Component } from 'react';\r\nimport \"./node.css\"\r\n\r\nclass Node extends Component {\r\n\r\n    \r\n    render() {\r\n        const{\r\n            row,\r\n            col,\r\n            isStartNode,\r\n            isFinishNode,\r\n            isWall,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            onMouseLeave\r\n        }=this.props;\r\n\r\n        const className = isStartNode ? 'node-start' : (isFinishNode ? 'node-finish': (isWall?'node-wall':'node'));\r\n        return (\r\n           <div id={`${row}-${col}`} className={className} onMouseDown={()=>{onMouseDown(row,col)}} onMouseEnter={()=>{onMouseEnter(row,col)}} onMouseUp={()=>{onMouseUp(row,col)}} onMouseLeave={()=>{onMouseLeave(row,col)}}></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Node;","import React, { Component } from \"react\";\r\nimport { djitskra } from \"./Djitskra.js\";\r\nimport Node from \"./node.jsx\";\r\n\r\nlet startNodeRow = 2;\r\nlet startNodeCol = 2;\r\n\r\nlet finishNodeRow = 19;\r\nlet finishNodeCol = 28;\r\n\r\nclass PathFindingVisualizer extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.visualizeDjitskra = this.visualizeDjitskra.bind(this);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsDown: false,\r\n      movingFinish:false,\r\n      movingStart:false,\r\n      modalShow :true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n    const grid = createGrid();\r\n    this.setState({ grid: grid });\r\n  }\r\n\r\n  visualizeDjitskra() {\r\n    const nodes = djitskra(this.state.grid, startNodeRow, startNodeCol);\r\n    let finishNode = {};\r\n\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      if (nodes[i].isFinishNode) finishNode = nodes[i];\r\n    }\r\n    console.log(\"vd\" + finishNode.row+ \" \"+ finishNode.col);\r\n\r\n    const shortestPathNodes = printPaths(finishNode, []);\r\n\r\n    for (let i = 0; i < shortestPathNodes.length - 1; i++) {\r\n      const [rowIdx, colIdx] = shortestPathNodes[i];\r\n\r\n      setTimeout(() => {\r\n        document.getElementById(\r\n          `${rowIdx}-${colIdx}`\r\n        ).className = `node-shortest-path`;\r\n      }, i * 100);\r\n    }\r\n  }\r\n\r\n  onMouseUp(rowIdx,colIdx){\r\n\r\n    const grid = this.state.grid;\r\n    if(this.state.movingFinish){\r\n      finishNodeRow=rowIdx;\r\n      finishNodeCol=colIdx;\r\n      document.getElementById(`${rowIdx}-${colIdx}`).className='node-finish';\r\n      grid[rowIdx][colIdx].isFinishNode=true;\r\n    }\r\n    else if(this.state.movingStart){\r\n      startNodeRow=rowIdx;\r\n      startNodeCol=colIdx;\r\n      document.getElementById(`${rowIdx}-${colIdx}`).className='node-start';\r\n      grid[rowIdx][colIdx].isStartNode=true;\r\n\r\n    }\r\n    this.setState({grid:grid,mouseIsDown:false,movingFinish:false,movingStart:false});\r\n  \r\n\r\n  }\r\n\r\n  onMouseLeave(rowIdx,colIdx){\r\n    if(document.getElementById(`${rowIdx}-${colIdx}`).className === `node-finish` && this.state.mouseIsDown&& this.state.movingFinish){\r\n      document.getElementById(`${rowIdx}-${colIdx}`).className = `node`;\r\n    }\r\n    else if(document.getElementById(`${rowIdx}-${colIdx}`).className === `node-start` && this.state.mouseIsDown&& this.state.movingStart){\r\n      document.getElementById(`${rowIdx}-${colIdx}`).className = `node`;\r\n\r\n    }\r\n  }\r\n\r\n\r\n \r\n  onMouseEnter(rowIdx, colIdx) {\r\n    const grid = this.state.grid;\r\n    if(rowIdx===startNodeRow && colIdx===startNodeCol){}\r\n    else if(rowIdx===finishNodeRow && colIdx===finishNodeCol){}\r\n    else if(this.state.movingFinish && this.state.mouseIsDown){\r\n      document.getElementById(`${rowIdx}-${colIdx}`).className = `node-finish`;\r\n\r\n    }\r\n    else if(this.state.mouseIsDown &&this.state.movingStart ){\r\n      document.getElementById(`${rowIdx}-${colIdx}`).className = `node-start`;\r\n\r\n    }\r\n    else if(this.state.mouseIsDown)\r\n    {\r\n    grid[rowIdx][colIdx].isWall=true; document.getElementById(`${rowIdx}-${colIdx}`).className = `node-wall`;\r\n    }\r\n    \r\n\r\n   this.setState({grid:grid})\r\n  }\r\n\r\n  onMouseDown(rowIdx, colIdx) {\r\n    const grid = this.state.grid;\r\n\r\n    if(rowIdx===startNodeRow && colIdx===startNodeCol){\r\n      document.getElementById(`${rowIdx}-${colIdx}`).className = `node`;\r\n      grid[rowIdx][colIdx].isStartNode=false;\r\n      this.setState({grid:grid,movingStart:true,mouseIsDown:true})\r\n\r\n    }\r\n    else if(rowIdx===finishNodeRow && colIdx===finishNodeCol){\r\n      document.getElementById(`${rowIdx}-${colIdx}`).className = `node`;\r\n      grid[rowIdx][colIdx].isFinishNode=false;\r\n      this.setState({grid:grid,movingFinish:true,mouseIsDown:true})\r\n    }\r\n    else if(document.getElementById(`${rowIdx}-${colIdx}`).className === `node`)\r\n    {\r\n    grid[rowIdx][colIdx].isWall=true; document.getElementById(`${rowIdx}-${colIdx}`).className = `node-wall`;\r\n    this.setState({grid:grid,mouseIsDown:true})\r\n    }\r\n    else{\r\n      grid[rowIdx][colIdx].isWall=false; document.getElementById(`${rowIdx}-${colIdx}`).className = `node`;\r\n      this.setState({grid:grid,mouseIsDown:true})\r\n\r\n    }\r\n\r\n\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n        <button className=\"button\" onClick={this.visualizeDjitskra}>Visualize!</button>\r\n        </div>\r\n\r\n        <div className=\"grid\">\r\n          {this.state.grid.map((row, rowIdx) => {\r\n            return row.map((node, nodeIdx) => {\r\n              const { row, col, isFinishNode, isStartNode,isWall } = node;\r\n\r\n              return (\r\n                <Node\r\n                  row={row}\r\n                  col={col}\r\n                  isStartNode={isStartNode}\r\n                  isFinishNode={isFinishNode}\r\n                  isWall={isWall}\r\n                  onMouseDown={(row,col)=>this.onMouseDown(row,col)}\r\n                  onMouseEnter={(row,col)=>{this.onMouseEnter(row,col)}}\r\n                  onMouseUp={(row,col)=>{this.onMouseUp(row,col)}}\r\n                  onMouseLeave={(row,col)=>this.onMouseLeave(row,col)}\r\n                ></Node>\r\n              );\r\n            });\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet printPaths = (finishNode, shortestPathNodes) => {\r\n  if (finishNode.previousNode === null) {\r\n    return shortestPathNodes;\r\n  } else {\r\n    shortestPathNodes.unshift([finishNode.row, finishNode.col]);\r\n    return printPaths(finishNode.previousNode, shortestPathNodes);\r\n  }\r\n};\r\n\r\nlet createGrid = () => {\r\n  let grid = [];\r\n\r\n  for (let i = 0; i < 20; i++) {\r\n    let currentRow = [];\r\n    for (let j = 0; j < 50; j++) {\r\n      currentRow.push({\r\n        row: i,\r\n        col: j,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        previousNode: null,\r\n        isStartNode: i === startNodeRow && j === startNodeCol,\r\n        isFinishNode: i === finishNodeRow && j === finishNodeCol,\r\n        isWall:false\r\n      });\r\n    }\r\n\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nexport default PathFindingVisualizer;\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport PathFindingVisualizer from \"./pathFindingVisualizer.jsx\";\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport React, { Component } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nexport function MyVerticallyCenteredModal(props) {\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Dijkstra Path Finding Visualizer\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <h4>Tutorial</h4>\r\n       <ol>\r\n         <li>Press and drag start (RED) and end (Green) nodes to change their positions</li>\r\n         <li>Press and drag to create walls </li>\r\n         <li>Press Visualize! button</li>\r\n       </ol>\r\n       <p style={{color:\"red\"}}>Note: This project is still being worked on and not complete.</p>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\nfunction App() {\r\n\r\n  const [modalShow, setModalShow] = React.useState(true);\r\n  return (\r\n   <div>\r\n     <MyVerticallyCenteredModal show={modalShow}onHide={() => setModalShow(false)}/>\r\n     <PathFindingVisualizer/>\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}